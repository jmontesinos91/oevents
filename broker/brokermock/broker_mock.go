// Code generated by mockery v2.26.1. DO NOT EDIT.

package brokermock

import (
	context "context"

	broker "github.com/jmontesinos91/oevents/broker"

	mock "github.com/stretchr/testify/mock"

	oevents "github.com/jmontesinos91/oevents"
)

// MessagingBrokerProvider is an autogenerated mock type for the MessagingBrokerProvider type
type MessagingBrokerProvider struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MessagingBrokerProvider) Close() { //nolint:typecheck
	_m.Called()
}

// Publish provides a mock function with given fields: ctx, topic, events
func (_m *MessagingBrokerProvider) Publish(ctx context.Context, topic string, events ...oevents.OmniViewEvent) bool {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...) //nolint:typecheck

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oevents.OmniViewEvent) bool); ok {
		r0 = rf(ctx, topic, events...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, maxRecords, workerChannel
func (_m *MessagingBrokerProvider) Subscribe(ctx context.Context, maxRecords int, workerChannel chan<- broker.OmniViewMessage) {
	_m.Called(ctx, maxRecords, workerChannel) //nolint:typecheck
}

type mockConstructorTestingTNewMessagingBrokerProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessagingBrokerProvider creates a new instance of MessagingBrokerProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessagingBrokerProvider(t mockConstructorTestingTNewMessagingBrokerProvider) *MessagingBrokerProvider {
	mock := &MessagingBrokerProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) }) //nolint:typecheck

	return mock
}
